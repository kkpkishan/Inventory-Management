#!/bin/bash

set -euo pipefail

# Define the location of the network scanning script inside the Docker container
NETWORK_SCANNING_SCRIPT="/usr/share/filebeat/network-json.sh"

# Define default max runtime for Filebeat (in seconds)
DEFAULT_MAX_RUNTIME=180
FILEBEAT_MAX_RUNTIME=${FILEBEAT_MAX_RUNTIME:-$DEFAULT_MAX_RUNTIME}

# Start the network scanning script and wait for its completion
echo "Running network scanning script..."
sudo /bin/bash   "$NETWORK_SCANNING_SCRIPT" -r "${NETWORK_RANGE}" -p "${PARALLELISM}" -v "${VERBOSE}" -l "${LOCATION}"
echo "Network scanning script completed."

# Function to run Filebeat for a limited time
run_filebeat_for_limited_time() {
  filebeat "$@" &
  FILEBEAT_PID=$!
  sleep $FILEBEAT_MAX_RUNTIME # Wait for the specified max runtime
  echo "Max runtime of $FILEBEAT_MAX_RUNTIME seconds has passed. Stopping Filebeat."
  kill $FILEBEAT_PID
}

# Check if the user has invoked the image with flags.
# e.g., "filebeat -c filebeat.yml"
if [[ -z $1 ]] || [[ ${1:0:1} == '-' ]]; then
  # Run Filebeat for a limited time
  run_filebeat_for_limited_time "$@"
else
  # They may be looking for a Beat subcommand, like "filebeat setup".
  subcommands=$(filebeat help |
    awk 'BEGIN {RS=""; FS="\n"} /Available Commands:/' |
    awk '/^\s+/ {print $1}')

  # If we _did_ get a subcommand, pass it to Filebeat for a limited time.
  for subcommand in $subcommands; do
    if [[ $1 == $subcommand ]]; then
      run_filebeat_for_limited_time "$@"
      break
    fi
  done
fi

# If the script didn't find a Filebeat command, execute the provided command
if [[ -z "${FILEBEAT_PID:-}" ]]; then
  exec "$@"
else
  # Wait for Filebeat process to be killed
  wait $FILEBEAT_PID

  # Once Filebeat exits, stop the container
  echo "Filebeat process has completed. Stopping the container."
  exit 0
fi
